// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uid       String    @id @unique
  email     String    @unique
  name      String?
  password  String?
  telephone String?
  tokens    Token?    @relation("User_token", fields: [tokenUid], references: [uid])
  tokenUid  String?
  roles     Role      @relation("User_Role", fields: [roleUid], references: [uid])
  roleUid   String
  lastLogin DateTime?
  status    String    @default("ACTIVE")
  photo     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Employee {
  uid              String           @id @unique
  name             String
  telephone        String           @unique
  photo            String?
  address          String?
  historiesProduct HistoryProduct[] @relation("Employee_HistoryProduct")
  businessUnit     BusinessUnit     @relation("BusinessUnit_Employee", fields: [businessUnitUid], references: [uid])
  businessUnitUid  String
  status           String           @default("ACTIVE")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Token {
  uid         String   @id @unique
  token       String   @unique
  type        String
  expiresAt   DateTime
  blacklisted Boolean  @default(false)
  users       User[]   @relation("User_token")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  uid       String   @id @unique
  name      String   @unique
  access    String[]
  users     User[]   @relation("User_Role")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessUnit {
  uid       String           @id @unique
  name      String           @unique
  location  String
  products  Product[]        @relation("BusinessUnit_Product")
  histories HistoryProduct[] @relation("BusinessUnit_HistoryProduct")
  employees Employee[]       @relation("BusinessUnit_Employee")
  category  Category[]       @relation("Category_BusinessUnit")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Category {
  uid             String       @id @unique
  name            String       @unique
  products        Product[]    @relation("Category_Product")
  business        BusinessUnit @relation("Category_BusinessUnit", fields: [businessUnitUid], references: [uid])
  businessUnitUid String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Product {
  uid             String           @id @unique
  name            String           @unique
  quantity        Int
  description     String?
  priceBuy        Float
  priceSell       Float
  code            String?          @unique
  photo           String?
  category        Category         @relation("Category_Product", fields: [categoryUid], references: [uid])
  categoryUid     String
  businessUnit    BusinessUnit     @relation("BusinessUnit_Product", fields: [businessUnitUid], references: [uid])
  businessUnitUid String
  HistoryProduct  HistoryProduct[] @relation("History_Product")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model HistoryProduct {
  uid             String       @id @unique
  product         Product      @relation("History_Product", fields: [productUid], references: [uid])
  productUid      String
  quantity        Int
  priceBuy        Float
  businessUnit    BusinessUnit @relation("BusinessUnit_HistoryProduct", fields: [businessUnitUid], references: [uid])
  businessUnitUid String
  photo           String
  dateIn          DateTime
  description     String?
  employee        Employee     @relation("Employee_HistoryProduct", fields: [employeeUid], references: [uid])
  employeeUid     String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}
